# 位运算bitwise operation

# 与运算符
#0&0 = 0   0&1 = 0   1&0 = 0   1&1 = 1
print(1&5)
# 1）清零 如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。
# 2）取一个数的指定位
# 比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，
# 然后将X与Y进行按位与运算（X&Y=0000 1110）即可得到X的指定位。
# 3）判断奇偶
# 只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。
# 因此可以用if ((a & 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。

# 或运算符
# 0|0=0  0|1=1  1|0=1  1|1=1
# 1）常用来对一个数据的某些位设置为1
# 比如将数 X=1010 1110 的低4位设置为1，
# 只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，
# 然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。

# 异或运算符
# 0^0=0  0^1=1  1^0=1  1^1=0
# 1）翻转指定位
# 比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，
# 然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。
# 2）与0相异或值不变
# 例如：1010 1110 ^ 0000 0000 = 1010 1110
# 3）交换两个数

# 左移运算符（<<）
# 定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。
# 右移运算符（>>）
# 定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。
print(0>>1)
print(7<<1)
def mult(x,y):
    ans = 0
    while y>0:
        if (y&1)==1:
            ans+=x
        y >>=1
        x+=x
    return ans
print(mult(2,5))